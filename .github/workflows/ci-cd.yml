# This workflow will test the module and then upload to PyPi, when triggered by the creation of a new GitHub Release
# It uses the Python Package GitHub Actions workflow.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# and https://www.youtube.com/watch?v=l6fV09z5XHk
# and https://py-pkgs.org/08-ci-cd#uploading-to-testpypi-and-pypi

name: ci-cd

# Build only on creation of new releases
on:
  # push:  # build on every commit push
  # pull_request:  # build on every pull request
  release:  # build on every releases
    types:
    - published  # use published, not released and prereleased, because prereleased is not triggered if created from a draft: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.10", "*", "3.12-dev", pypy-3.9]  # check the list of versions: https://github.com/actions/python-versions/releases and https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md -- note that "*" represents the latest stable version of Python
        os: [ ubuntu-latest, windows-latest, macos-latest ] # jobs that run on Windows and macOS runners that GitHub hosts consume minutes at 2 and 10 times the rate that jobs on Linux runners consume respectively. But it's free for public OSS repositories.
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: |
        python -c "import sys; print(sys.version)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        #python -m pip install pytest pytest-cov  # done in setup.cfg for Py2 or pyproject.toml for Py3
        #if [ ${{ matrix.python-version }} <= 3.7 ]; then python -m pip install 'coverage<4'; else python -m pip install coverage; fi
        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Install this module
      #if: ${{ matrix.python-version >= 3 }}  # does not work on dynamic versions, see: https://github.com/actions/setup-python/issues/644
      # Do not import testmeta, they make the build fails somehow, because some dependencies are unavailable on Py2
      run: |
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple --upgrade --editable .[test] --verbose --use-pep517
    - name: Test with pytest
      run: |
        coverage run --branch -m pytest . -v
        coverage report -m

  build:
    name: Build source distribution and wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: python -m pip install --upgrade build
      - run: python -sBm build

      - uses: actions/upload-artifact@v3
        with:
          path: dist/


